// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/xh-polaris/gopkg/hertz/middleware"
	logx "github.com/xh-polaris/gopkg/util/log"
	"github.com/xh-polaris/psych-senior/biz/adaptor"
	"github.com/xh-polaris/psych-senior/biz/adaptor/router"
	"github.com/xh-polaris/psych-senior/biz/infrastructure/mq"
	"github.com/xh-polaris/psych-senior/biz/infrastructure/util/log"
	"github.com/xh-polaris/psych-senior/provider"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	"go.opentelemetry.io/contrib/propagators/b3"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/propagation"
	"net/http"
)

func Init() {
	// 初始化依赖注入
	provider.Init()
	// 初始化自定义日志
	hlog.SetLogger(logx.NewHlogLogger())
	// 设置openTelemetry的传播器，用于分布式追踪中传递上下文信息
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(b3.New(), propagation.Baggage{}, propagation.TraceContext{}))
	http.DefaultTransport = otelhttp.NewTransport(http.DefaultTransport)
}

func main() {
	Init()
	c := provider.Get().Config

	// 创建服务器追踪器
	tracer, cfg := tracing.NewServerTracer()
	// 创造hertz服务器实例
	h := server.New(
		server.WithHostPorts(c.ListenOn),
		//server.WithTracer(prometheus.NewServerTracer(":9091", "/server/metrics")),
		tracer,
	)

	// TODO 不是很理解为什么 issue: https://github.com/cloudwego/hertz/issues/121
	h.NoHijackConnPool = true

	// 增加全局中间件链
	h.Use(tracing.ServerMiddleware(cfg), middleware.EnvironmentMiddleware, recovery.Recovery(), func(ctx context.Context, c *app.RequestContext) {
		ctx = adaptor.InjectContext(ctx, c)
		c.Next(ctx)
	})

	// 注册路由
	router.Register(h)
	log.Info("server start")

	// 启动消费者
	go mq.Consume()

	h.Spin()
}
